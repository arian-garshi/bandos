/**
 * Generic Contact Form Email Handler for Vercel Serverless Functions
 * 
 * SETUP INSTRUCTIONS:
 * 1. Update the CONFIG object below with your website details
 * 2. Set these environment variables in Vercel:
 *    - RESEND_API_KEY (required)
 *    - FROM_EMAIL (optional, uses defaultFromEmail if not set)
 *    - TO_EMAIL (optional, uses defaultToEmail if not set)
 *    - COMPANY_NAME (optional, uses CONFIG.companyName if not set)
 *    - WEBSITE_URL (optional, uses CONFIG.websiteUrl if not set)
 * 
 * CUSTOMIZATION:
 * - Change colors, company name, and text in the CONFIG object
 * - Modify email templates by editing the generateEmailTemplate function
 * - Add new languages by updating the texts object
 * - Adjust styling by modifying the HTML template
 */

// Configuration object - customize this for your website
const CONFIG = {
  // Email settings
  defaultFromEmail: 'noreply@bandos.no',
  defaultToEmail: 'ariangars@gmail.com',
  
  // Website branding
  companyName: 'Bandos',
  websiteUrl: 'bandos.no',
  brandColor: '#D2415B',
  secondaryColor: '#932d40',
  
  // Email content
  subjectTemplate: (name) => `Ny kundehenvendelse fra ${name || 'Potensiell kunde'}`,
  replySubject: 'Re: Din henvendelse til',
  replyGreeting: (name) => `Hei ${name || 'der'},%0D%0A%0D%0ATakk for din henvendelse. `,
  
  // Localization (Norwegian)
  locale: 'no-NO',
  texts: {
    newInquiry: 'Ny Kundehenvendelse',
    fromContactForm: 'Fra ditt kontaktskjema p책',
    customerInfo: 'Kundeinformasjon',
    name: 'Navn',
    email: 'E-post',
    date: 'Dato',
    message: 'Melding',
    notProvided: 'Ikke oppgitt',
    replyButton: 'Svar p책 henvendelse',
    importantNotice: 'Viktig:',
    cannotReplyDirectly: 'Du kan ikke svare direkte p책 denne e-posten.',
    useButtonOrEmail: 'Bruk knappen ovenfor eller send en ny e-post til',
    toContactCustomer: 'for 책 kontakte kunden.',
    autoGenerated: 'Automatisk generert fra',
    contactForm: 'kontaktskjema',
    systemEmail: 'Dette er en systemgenerert e-post fra ditt nettsted'
  }
};

// Generate email template using configuration
function generateEmailTemplate(name, email, message, companyName, websiteUrl, config) {
  const formattedDate = new Date().toLocaleDateString(config.locale, { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${config.texts.newInquiry}</title>
    </head>
    <body style="font-family: 'Helvetica Neue', Arial, sans-serif; line-height: 1.5; color: #2d3748; max-width: 600px; margin: 0 auto; padding: 0; background-color: #f7fafc;">
      
      <!-- Header -->
      <div style="background: #ffffff; padding: 40px 30px 30px 30px; border-bottom: 1px solid #e2e8f0;">
        <h1 style="margin: 0; font-size: 24px; font-weight: 300; color: #1a202c; letter-spacing: -0.025em;">${config.texts.newInquiry}</h1>
        <p style="margin: 8px 0 0 0; color: #718096; font-size: 14px; font-weight: 400;">${config.texts.fromContactForm} ${websiteUrl}</p>
      </div>
      
      <!-- Content -->
      <div style="background: #ffffff; padding: 0;">
        
        <!-- Customer Info -->
        <div style="padding: 30px; border-bottom: 1px solid #f1f5f9;">
          <h2 style="margin: 0 0 20px 0; font-size: 16px; font-weight: 500; color: #4a5568; text-transform: uppercase; letter-spacing: 0.05em;">${config.texts.customerInfo}</h2>
          
          <table style="width: 100%; border-collapse: collapse;">
            <tr>
              <td style="padding: 12px 0; font-weight: 500; color: #718096; width: 100px; vertical-align: top;">${config.texts.name}</td>
              <td style="padding: 12px 0; color: #2d3748; font-weight: 400;">${name || config.texts.notProvided}</td>
            </tr>
            <tr>
              <td style="padding: 12px 0; font-weight: 500; color: #718096; vertical-align: top;">${config.texts.email}</td>
              <td style="padding: 12px 0;">
                <a href="mailto:${email}" style="color: #2d3748; text-decoration: none; font-weight: 500;">${email}</a>
              </td>
            </tr>
            <tr>
              <td style="padding: 12px 0; font-weight: 500; color: #718096; vertical-align: top;">${config.texts.date}</td>
              <td style="padding: 12px 0; color: #2d3748; font-weight: 400;">${formattedDate}</td>
            </tr>
          </table>
        </div>
        
        <!-- Message -->
        <div style="padding: 30px; border-bottom: 1px solid #f1f5f9;">
          <h2 style="margin: 0 0 20px 0; font-size: 16px; font-weight: 500; color: #4a5568; text-transform: uppercase; letter-spacing: 0.05em;">${config.texts.message}</h2>
          <div style="background: #f7fafc; padding: 20px; border-radius: 6px; border-left: 3px solid #cbd5e0; font-size: 15px; line-height: 1.6; color: #2d3748;">
            ${(message || '').replace(/\n/g,'<br>')}
          </div>
        </div>
        
        <!-- Reply Button -->
        <div style="padding: 40px 30px; text-align: center;">
          <a href="mailto:${email}?subject=${config.replySubject} ${companyName}&body=${config.replyGreeting(name)}" 
             style="background: #2d3748; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 500; font-size: 14px; display: inline-block; text-transform: uppercase; letter-spacing: 0.025em;">
            ${config.texts.replyButton}
          </a>
        </div>
        
        <!-- Important Notice -->
        <div style="background: #f7fafc; border-top: 1px solid #e2e8f0; padding: 20px 30px;">
          <p style="margin: 0; color: #718096; font-size: 13px; line-height: 1.5;">
            <strong style="color: #4a5568;">${config.texts.importantNotice}</strong> ${config.texts.cannotReplyDirectly} 
            ${config.texts.useButtonOrEmail} <strong style="color: #2d3748;">${email}</strong> ${config.texts.toContactCustomer}
          </p>
        </div>
        
      </div>
      
      <!-- Footer -->
      <div style="background: #f7fafc; padding: 30px; text-align: center; border-top: 1px solid #e2e8f0;">
        <p style="margin: 0; color: #a0aec0; font-size: 12px; font-weight: 400;">${config.texts.autoGenerated} <strong style="color: #718096;">${companyName}</strong> ${config.texts.contactForm}</p>
        <p style="margin: 8px 0 0 0; color: #cbd5e0; font-size: 12px;">${config.texts.systemEmail}</p>
      </div>
      
    </body>
    </html>
  `;
}

module.exports = async (req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') return res.status(405).send('Method not allowed');
  const { name, email, message } = req.body || {};
  if (!email || !message) return res.status(400).json({ error: 'Missing fields' });

  // Get environment variables with fallbacks from config
  const resendApiKey = process.env.RESEND_API_KEY;
  const fromEmail = process.env.FROM_EMAIL || CONFIG.defaultFromEmail;
  const toEmail = process.env.TO_EMAIL || CONFIG.defaultToEmail;
  const companyName = process.env.COMPANY_NAME || CONFIG.companyName;
  const websiteUrl = process.env.WEBSITE_URL || CONFIG.websiteUrl;
  
  if (!resendApiKey) {
    console.error('RESEND_API_KEY is not set');
    return res.status(500).json({ error: 'Server configuration error' });
  }
  
  console.log('Environment check:', {
    hasApiKey: !!resendApiKey,
    fromEmail,
    toEmail,
    companyName,
    requestBody: { name, email, message }
  });

  try {
    const resp = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${resendApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        from: fromEmail,
        to: toEmail,
        subject: `${CONFIG.subjectTemplate(name)} - ${companyName}`,
        html: generateEmailTemplate(name, email, message, companyName, websiteUrl, CONFIG)
      })
    });
    
    if (!resp.ok) {
      const text = await resp.text();
      console.error('Resend API error:', text);
      return res.status(502).json({ error: 'Email provider error', detail: text });
    }
    
    const result = await resp.json();
    console.log('Email sent successfully:', result);
    return res.status(200).json({ ok: true, messageId: result.id });
  } catch (err) {
    console.error('Server error:', err);
    return res.status(500).json({ error: 'Server error' });
  }
};